.TH K\-point "" "" "convergence study for a semi\-conductor"
.SH Background
.PP
This lesson deals with the basic k\-point convergence study that is
needed in any DFT calculation in periodic systems.
In such systems, indeed, the first Brillouin zone (BZ) needs to be
discretized when performing the integration of several important
quantities e.g.
the electronic density or the electronic energy.
Integrals over the BZ are therefore turned into sums over discrete
k\-points and the k\-mesh should be dense enough, but at the same time
as coarse as possible to make for an efficient calculation.
Your first investigation into a new compound will often be a k\-point
convergence study.
.PP
It is worth stressing that the density of the k\-mesh needed to reach
converged results is system\-dependent.
Note that metals need much denser k\-meshes than semiconductors.
The presence of the Fermi surface, indeed, introduces discontinuities in
the integrand functions and a fictitious broadening of the occupation
factors (tsmear) should be introduced in order to accelerate the
convergence of the integrals.
.SH The related Abinit variables
.PP
The variables used to specify the k\-point sampling are:
.RS
.IP \[bu] 2
ngkpt
.IP \[bu] 2
shiftk
.IP \[bu] 2
kptopt (see exercises)
.RE
.PP
The variables used to specify the occupation scheme in metals are:
.RS
.IP \[bu] 2
occopt (see exercises)
.IP \[bu] 2
tsmear (see exercises)
.RE
.PP
For a more detailed description of the variables, you are invited to
consult the abinit documentation.
The full description, directly from the official abinit docs, is
available via the shell command:
.RS
.IP
.nf
\f[C]
abidoc.py\ man\ inputvariable
\f[]
.fi
.RE
.PP
that prints the official description of inputvariable.
.SH Description of the lesson
.PP
In the generation of this lesson by the python script all the input
files have been generated automatically.
The input files have been organized in a workdir
"flow_lesson_Si_kpoint_convergence".
Inside this directory, you\[aq]ll find a single work, w0, with four
tasks, t0\-t1\-t2\-t3.
Have a look at the input files, run.abi, of the four tasks to see what
is different.
.PP
You\[aq]ll see that also the files file and the jobs submission script
have been generated.
In the job scripts you\[aq]ll see that the jobs are prepared to run just
on the front end.
.PP
You\[aq]ll also see that the files file has been created as well.
.PP
To perform the k\-point convergence study execute, abinit with the four
input sets.
.PP
Once the calculations are ready, you\[aq]ll see three important output
files.
.RS
.IP \[bu] 2
run.out
.IP \[bu] 2
run.log
.IP \[bu] 2
run.err
.RE
.PP
The main summary of the calculation can be found in the .out file,
we\[aq]ll go there soon :\-).
The .err file should be empty.
If it\[aq]s not something went wrong.
If something went wrong read the .err.
file.
The .log file contains extensive information on you calculation that
could help to find out what went wrong in the case of errors.
Especially there are three types of messages that could help
.RS
.IP \[bu] 2
COMMENT
.IP \[bu] 2
WARNING
.IP \[bu] 2
ERROR
.RE
.PP
In case of an error message abinit stopped the execution by itself,
because of that error.
.PP
Now the .out file.
Some interesting keywords to look for:
.RS
.IP \[bu] 2
Symmetries
.IP \[bu] 2
Citation for XC functional:
.IP \[bu] 2
ETOT (the total energies during the electronic structure convergence)
.IP \[bu] 2
Eigenvalues
.IP \[bu] 2
Etotal (the total energy of an ionic step)
.RE
.PP
Obviously there is much more.
.PP
Collect the total energies of the four calculations and plot them as a
function of the number of k\-points in the calculation.
.PP
Alternative to execution of the manual execution the calculations can
also be executed using the abipy scheduler.
.RS
.IP
.nf
\f[C]
abirun.py\ flow_lesson_Si_kpoint_convergence\ scheduler
\f[]
.fi
.RE
